module Day3 exposing (..)

import Browser
import Html exposing (div, h1, h2, p, text)
import List.Extra


main =
    Browser.sandbox { init = init, update = update, view = view }


type Msg
    = NoOp


type alias Model =
    { part1 : Int
    , part1Test : Int
    , part2 : Int
    , part2Test : Int
    }


init : Model
init =
    { part1Test = solvePart1 testData
    , part1 = solvePart1 data
    , part2Test = solvePart2 testData
    , part2 = solvePart2 data
    }


update : Msg -> Model -> Model
update msg model =
    case msg of
        NoOp ->
            model


view model =
    div []
        [ h1 [] [ text "Day 2" ]
        , h2 [] [ text "Part 1" ]
        , p [] [ text (String.fromInt model.part1Test) ]
        , p [] [ text (String.fromInt model.part1) ]
        , h2 [] [ text "Part 2" ]
        , p [] [ text (String.fromInt model.part2Test) ]
        , p [] [ text (String.fromInt model.part2) ]
        ]


stepsRight1Down1 : Int -> List ( Int, Int )
stepsRight1Down1 hillHeight =
    List.range 0 (hillHeight - 1)
        |> List.map
            (\i ->
                case i of
                    0 ->
                        ( 0, 0 )

                    j ->
                        ( j, j )
            )


stepsRight3Down1 : Int -> List ( Int, Int )
stepsRight3Down1 hillHeight =
    List.range 0 (hillHeight - 1)
        |> List.map
            (\i ->
                case i of
                    0 ->
                        ( 0, 0 )

                    j ->
                        ( j * 3, j )
            )


stepsRight5Down1 : Int -> List ( Int, Int )
stepsRight5Down1 hillHeight =
    List.range 0 (hillHeight - 1)
        |> List.map
            (\i ->
                case i of
                    0 ->
                        ( 0, 0 )

                    j ->
                        ( j * 5, j )
            )


stepsRight7Down1 : Int -> List ( Int, Int )
stepsRight7Down1 hillHeight =
    List.range 0 (hillHeight - 1)
        |> List.map
            (\i ->
                case i of
                    0 ->
                        ( 0, 0 )

                    j ->
                        ( j * 7, j )
            )


stepsRight1Down2 : Int -> List ( Int, Int )
stepsRight1Down2 hillHeight =
    List.range 0 (hillHeight - 1)
        |> List.map
            (\i ->
                case i of
                    0 ->
                        ( 0, 0 )

                    j ->
                        ( j, j * 2 )
            )
        |> List.filter
            (\( _, y ) ->
                y < hillHeight
            )


findNumberOfTreesStrikes : Hill -> List ( Int, Int ) -> Int
findNumberOfTreesStrikes hill steps =
    List.foldl
        (\( x, y ) n ->
            case getGround hill x y of
                Snow ->
                    n

                Tree ->
                    n + 1
        )
        0
        steps


solvePart1 data_ =
    let
        hill : Hill
        hill =
            { map = data_ |> List.map (\row -> String.toList row |> List.map charToGround)
            , width = data_ |> List.map (\row -> String.length row) |> List.head |> Maybe.withDefault 0
            , height = data_ |> List.length
            }

        steps : List ( Int, Int )
        steps =
            List.range 0 (hill.height - 1)
                |> List.map
                    (\i ->
                        case i of
                            0 ->
                                ( 0, 0 )

                            j ->
                                ( j * 3, j )
                    )
    in
    List.foldl
        (\( x, y ) n ->
            case getGround hill x y of
                Snow ->
                    n

                Tree ->
                    n + 1
        )
        0
        steps


solvePart2 data_ =
    let
        hill : Hill
        hill =
            { map = data_ |> List.map (\row -> String.toList row |> List.map charToGround)
            , width = data_ |> List.map (\row -> String.length row) |> List.head |> Maybe.withDefault 0
            , height = data_ |> List.length
            }

        _ =
            Debug.log "stepsRight1Down1" (findNumberOfTreesStrikes hill (stepsRight1Down1 hill.height))

        _ =
            Debug.log "stepsRight3Down1" (findNumberOfTreesStrikes hill (stepsRight3Down1 hill.height))

        _ =
            Debug.log "stepsRight5Down1" (findNumberOfTreesStrikes hill (stepsRight5Down1 hill.height))

        _ =
            Debug.log "stepsRight7Down1" (findNumberOfTreesStrikes hill (stepsRight7Down1 hill.height))

        _ =
            Debug.log "stepsRight1Down2" (findNumberOfTreesStrikes hill (stepsRight1Down2 hill.height))
    in
    findNumberOfTreesStrikes hill (stepsRight1Down1 hill.height)
        * findNumberOfTreesStrikes hill (stepsRight3Down1 hill.height)
        * findNumberOfTreesStrikes hill (stepsRight5Down1 hill.height)
        * findNumberOfTreesStrikes hill (stepsRight7Down1 hill.height)
        * findNumberOfTreesStrikes hill (stepsRight1Down2 hill.height)


charToGround : Char -> Ground
charToGround char =
    case char of
        '.' ->
            Snow

        '#' ->
            Tree

        _ ->
            Tree


testData =
    [ "..##......."
    , "#...#...#.."
    , ".#....#..#."
    , "..#.#...#.#"
    , ".#...##..#."
    , "..#.##....."
    , ".#.#.#....#"
    , ".#........#"
    , "#.##...#..."
    , "#...##....#"
    , ".#..#...#.#"
    ]


data =
    [ "...#...###......##.#..#.....##."
    , "..#.#.#....#.##.#......#.#....#"
    , "......#.....#......#....#...##."
    , "...#.....##.#..#........##....."
    , "...##...##...#...#....###....#."
    , "...##...##.......#....#...#.#.."
    , "..............##..#..#........#"
    , "#.#....#.........#...##.#.#.#.#"
    , ".#..##......#.#......#...#....#"
    , "#....#..#.#.....#..#...#...#..."
    , "#.#.#.....##.....#.........#..."
    , "......###..#....#..#..#.#....#."
    , "##.####...#.............#.##..#"
    , "....#....#..#......#.......#..."
    , "...#.......#.#..#.........##.#."
    , "......#.#.....###.###..###..#.."
    , "##..##.......#.#.....#..#....#."
    , "..##.#..#....#.............##.#"
    , "....#.#.#..#..#........##....#."
    , ".....####..#..#.###..#....##..#"
    , "#.#.......#...##.##.##..#....#."
    , ".#..#..##...####.#......#..#..."
    , "#...##.......#...####......##.."
    , "...#.####....#.#...###.#.#...#."
    , "....#...........#.##.##.#......"
    , ".....##...#.######.#..#....#..#"
    , ".#....#...##....#..######....#."
    , "...#.....#...#####.##...#..#.#."
    , ".....#...##........##.##.##.###"
    , "#.#..#....##....#......#....#.#"
    , "......##...#.........#....#.#.."
    , "###..#..##......##.#####.###.##"
    , "#.....#..##.##....#...........#"
    , "##..#.#..##..#.#.....#......#.."
    , ".#.##.#..#.#....##..#..#....#.."
    , ".#......##..##.#...#..#.......#"
    , "#....##.##..###..###......##.#."
    , "....###..##.......#.###.#....#."
    , "..##........#........##.....#.."
    , ".#..#.....#...####.##...##....."
    , "....#.#.#.....#.##..##.....#..#"
    , "..............#.....#...#.....#"
    , ".#.....#......###...........#.#"
    , ".....#.#......#.##..#.........."
    , ".#......###............#.#.##.."
    , ".#.#....##.#..###.....#.##..#.#"
    , ".......#.#.#..#..#..#...##..#.#"
    , ".#.###...##.#.#.####.#.#...#..."
    , "...#.#....#......##.##.#......."
    , "#...#.....##....#........##...."
    , ".....###...#.##.#......##.#..#."
    , "..#...##.##.###..#..#......####"
    , ".#.##.#..#.##..##..........##.."
    , "..#.#.#..#.#.....#...###.....#."
    , "..#..#.#....#.##.............##"
    , ".......#..###..#.#...#.....##.#"
    , "####.#.#......#..#.##.........#"
    , "..........#.....#..##......###."
    , "..#..............#...#..##....."
    , "......#.#.#..#.##.....####..##."
    , ".##.#..#.#....#.......#..#....."
    , "..#..#..#.##.#....###.#.#.#.#.#"
    , ".....#....#......###..#........"
    , "#.#.#..#...###.....#......#.##."
    , "...#.#....#.#......#........#.."
    , "..#...###.#...#..#....##...#..#"
    , ".###.##..#..#...###.#..#.####.."
    , "#....#..##..##..#......#...##.."
    , "#.#..#...#..#...###..#.#.##...."
    , "##....#....##.####...#.#.###..."
    , "##.#...#.......#.##.##....#...#"
    , "..#.#..........#..#.#.#....#..#"
    , "..#........#...#....#....#....#"
    , "..#..#....#.......#........#..."
    , "......#....#....##.#....#.#.##."
    , ".##...###.##.##....##.#...###.."
    , ".....##..#.#.....###..#.....###"
    , "....##.#.##...##..##........#.."
    , "#...#..##.#.#....#......#...#.."
    , ".###.##.#........#.####....#..."
    , "#.##.....#..#...#..##.##..#.#.."
    , ".....#.#..#....#..#...##.##.#.."
    , ".#......#####...##...#.#.###.#."
    , "#......##....#.....#......##.#."
    , "#.#.##.###.#......#####..#....."
    , "........###.#...#..#.#........#"
    , "....#....###..#.##.#...#....#.."
    , "..........#..#.#....#...#.#...#"
    , "#.##......###.#.#.#....####...#"
    , "...#.#....#........##.#.....##."
    , ".....##..#.#.#..###...##...#..."
    , "#...#...#....#....##........#.."
    , ".....#.........##.#......#..#.."
    , "#.....##..#.###.....#....##.##."
    , "...#..#..#.#........##...##.#.#"
    , "..#..##.###.....#.#.....###.##."
    , "..###.........#...##.....###..."
    , "...###...##.#...##....##......."
    , ".#.#..#...###..#.#....#....#..."
    , "##..#.......#....#.#...#..#..#."
    , "..#......#....####..##..#.###.#"
    , "..#.......##........#.#.#..#..."
    , ".#.......#.##.#.##.#.......#..#"
    , "###...#...#...#...#..#...#...##"
    , "..#..........#..###........##.."
    , ".##..#....##......##........#.#"
    , "......#.##......#......##...#.#"
    , ".#.#....#.#.#........#......#.."
    , ".#.#..#....####..##...##....#.."
    , ".#...##..#..#..#####....##.#..."
    , ".##.#.#...#...#.#...#.##.#...#."
    , "###.#...##..#.###.#.....#.##.#."
    , "#.....#.###.#.#...#..#....#.#.."
    , "..##..#....#......#.........###"
    , ".#...#...##......#...#.####...."
    , "..#.##...##..............#.#..#"
    , "..#......#..##...........#..#.#"
    , "..#####...#..#.......##...###.."
    , "..##..#....#.#...###.#...#....."
    , "..#....#..#.#.......#..#.#.#..."
    , ".##..#.#.....##....#.......#..."
    , "...#.#..###...##....#....##..#."
    , ".....##..#...##.####....##...#."
    , ".......#.........#...#.##..####"
    , "........###..#..#.##.###..#...."
    , ".#.#..#.##.##.........#...#...."
    , ".###......#.....#....##....####"
    , ".##..##...........#.....#.....#"
    , "#.#.#.#.#.#.##..#.#.#..#.##...."
    , ".##.##...##..#....##..###..####"
    , "#..##.#......#...###.........#."
    , "#..#...#..##..#..##.....##...#."
    , "#...##..#...##.#.###.#...#....."
    , ".###.....#.......#...#.##.###.#"
    , "..........#.#......#...###...##"
    , "..##....#.#..#....#.###...#..##"
    , "#.#..#....##.##..##.........##."
    , "#.....#.##.###.#..#....##...#.."
    , "...#........##...#..###..######"
    , "#..#.#.#.#...#....#....###.#..#"
    , "...##.##.##.....##..#........#."
    , "..#.#....#..#.......#...##.##.#"
    , "###.##.......##..#.####...#.#.."
    , "....#.#.....##.....#.#.##...#.."
    , ".#..##..#.....#.#..#...#..#..#."
    , ".###....##...#......#.....#...."
    , "##.##.###......#...#...###.#..."
    , "#...#.##...#.#....##.....####.."
    , "#.#.#.#...###...##............."
    , "..#....#.....##.#...#......#..."
    , "....#...#......#...#..#...#.#.."
    , ".###..#.....#..#...#....#...#.."
    , "..#...#.#..###.......#..#.#...#"
    , "#...###.##.....#....#..#.#..##."
    , "...#.##.#.##......#.#.#.##....."
    , "........####...##...##..#....#."
    , ".#.#....#....#.#...##.###...##."
    , "#.#...###.#.#.#....#....#.#...."
    , ".####.#..#.#....#..#.#..#..#..."
    , "#####...#...#...#....#.#.#..##."
    , "..###.##.###...#..........#.##."
    , "##.....#...#....###..###.#.#.#."
    , "#..##.#..#..#..#...#.#...###..#"
    , "##....#.#...##......#.#...#...#"
    , ".##..........#.#....#...#.##..#"
    , "....#....####.#.####......#.###"
    , "..##.#.....####.#.####.......#."
    , "#.##.##.#.....#.##......##...#."
    , "......###..#.....#.....##......"
    , "..#..#....#.#...#.....#......##"
    , "##..#..#..###.#.#..#..##.....#."
    , "#....#.#.....#####...#.#......."
    , ".....#..#....#.#.#..#...#...#.."
    , "............#.##......##.##.#.#"
    , "....#...#.#........###....#...."
    , "..#..#...###.#....##..#..###.##"
    , "#.##....#...#.....##..#.##.#..."
    , "...##..###...#.#.....##.#......"
    , ".#..#.##.#####..#.......#..###."
    , "...#.##...###.....####.#.#....."
    , ".#......##.#.#.#.#.##.#.....#.."
    , "..#.##.#..##.......#.#.....##.."
    , "..................#....#...#..."
    , ".##.#..#.#.#..#.......#.#..##.#"
    , "....#........#......#..####..#."
    , "#...#...##..##.#..#.......##..."
    , "#..#..#..#..#........####..#.#."
    , "..#.#......#..#.##.##.#.#...#.#"
    , "...#..#......#.#.###.#.##..##.."
    , "..#...##.....#..#...##..#.#...."
    , "#.........#....#..#....##.##..#"
    , "..#..#.#....#..#...#.##.....#.."
    , "...#..#...#.#.....#..##..#.#..."
    , "....#........#.#....##..##..#.."
    , "#.....#.#..#.......#.##.....#.."
    , ".#.###.###...##...##..###...#.."
    , ".##.##.......#.#......#.....#.#"
    , "...#....##....#..#..........#.#"
    , "..#.##.........#.#.....#.....#."
    , "...#.##..##.......##..##...#..."
    , "#.##......##.##..#.....##...##."
    , "#.#.#..##...#.#............#.#."
    , "....#.....#......##...#.#.....#"
    , "...#.#......#.#...###.......#.."
    , "......##..###....#.#...#.#####."
    , "..#..#.#.#...##.#...###..##..#."
    , "##.##.#.#.##.#..#....#...#...#."
    , "#..#....######.##.#...#...#.#.."
    , ".#..#.##....#..#.#.......#....#"
    , "....#....#......##....##.#.#..."
    , ".###......#..#..#.......####..#"
    , ".#.#.....#..###...........##..."
    , ".##..##.##.....####..#..#..##.."
    , "..#..##.#......#...###.##..#.#."
    , "....##..#.....###..#.##....##.#"
    , "#..#......#....#.........#....."
    , ".#...#.....#.#..#..##....#....."
    , ".##..#...#..##.#..#...........#"
    , "..#..##........##.......#..#..."
    , "#.....#....#....#.#.#...##.#..."
    , "...#...#.#.#..#.##.#.#...#....."
    , "..#..#.#....#....###....#.#.#.."
    , "...###..#...#..#....#.....#...."
    , "...#...#.#..#.....#...###......"
    , "##......#..........#.#.#..#.#.#"
    , "....#.....#.....#..#..#.#.#.#.."
    , "...####...#.##...#.#..#....#.#."
    , "#.##........##.............#.##"
    , "#.#.#.#.#.....................#"
    , ".#.###....#..##.##.##....#....."
    , "#.#...#.####.###...#..#..#.#..."
    , ".##...#..###.......##..#.#....."
    , "#.#.#.#...#...#.##.....#......."
    , ".##.#.#.#......####..#.#......."
    , "###..........#......#...##...#."
    , ".........##...#.##...#.#......."
    , "...#.#.....#...#..#...#..##..#."
    , ".#..###...#.#.........###....#."
    , "##..#...#........#.........##.."
    , ".....#...#.#...#.#.#..........."
    , "..#....##...#.#..#..#.##....##."
    , ".##....#.#.....##.#..#..#...##."
    , "..##......#.#...#.#.......##.#."
    , "##...#..#...##.#........#.##..."
    , "#......#.##..#.#..#.###.......#"
    , "#.#...#.....#.#......#.#.#....."
    , "#.....#..#.......#....##.#.#..#"
    , "###.#....#..##.#.##....#....#.."
    , "#.##.##....#.#..#.#...#....#..."
    , "####...#####...#.....#....##.#."
    , "....#.#...#.#.##.#.#.##.#.#.###"
    , "#.....##.#.....#.#......#.#..#."
    , ".#....##.#..#........#...##.#.."
    , "......#...#....##....##....##.."
    , "..###.....#....##.#...#..#....."
    , "#....##...##.##..##.#...#...#.."
    , "#..#...#...#.#....##..#.#....#."
    , "......................#.....#.."
    , ".#..#...#.........#....##...###"
    , ".##.#.#...##...#...#...#..#...."
    , ".#.###....#.#............##..#."
    , "###..##.#.#.#.#....##...#......"
    , ".##................####...##.##"
    , ".#.#.........##....#.#.##.##.#."
    , "....#...#...#...##...#.##.#..#."
    , ".#.#........#..##.....#..#....#"
    , "##.#..#.#....#.....#...#...#..."
    , ".#...##....#.....##....#..#.#.#"
    , "####.....#..#....#......###.##."
    , "##..##.#....###.....#...#......"
    , ".##.#...#.....#.#..#.#..#.#...#"
    , ".....#.#..#..#..###.#...###.#.."
    , ".#.#.##.#..#.#..#...#..#......."
    , "..#.....#....#.##.##.##.......#"
    , ".#..##....###...#.............."
    , "#....#...#.#.......#....##.#..."
    , "....#.#..##.#....#..#.#....#.#."
    , "#.........##...#.#............."
    , "#.#.......##.....#...##..##.#.#"
    , ".......#....#..##...#..#######."
    , ".#.#...##........#..#.....#.#.."
    , ".#.......#..#......#.##.##...##"
    , ".........#............#....#..#"
    , ".#......#...##...##...#....###."
    , ".........#...#.#.###.......#..."
    , "###.#..#.#.#.#......##...#.#..."
    , ".#.........##.#....###....#.#.."
    , "#.#....#..#.##.#..#....##...#.."
    , "###.#...#..#..##........#.###.."
    , ".....#....#..#........#..#.##.#"
    , "..#.....##......#....#..#.#.#.."
    , ".#.........#.....#.....#......."
    , "......#....#.###..#.#....#....#"
    , "..#.#..#.#.###.........#..#..#."
    , "..#..#.#.#.........#....##.#.#."
    , "#.......#........##...##....#.."
    , "##..#..#...###...#..##..#..#.#."
    , "##..#..#....#.#..##..#..#.#..#."
    , "..##.....##.#..#.#........###.."
    , "..#.#..#..##........#...#....##"
    , ".##..#....##..#..#..#..#.#....#"
    , "#....#.....##........#.....#.##"
    , "......#....#.#..#......#.##...."
    , ".......#..#..#......##........."
    , "......#...#..##.....#......#..#"
    , "#..#..#....##....#........##..#"
    , "##....#...#.#.....#####........"
    , "...#.#..#.#.##.#.##..##...#...."
    , "..#..#..#..#..#....#..#..##...#"
    , ".#.....#....##.##....##.....#.."
    , "#...#.....#.....#.#...#.#....#."
    , ".###...#..##....#..#...#.###..."
    , "....#..##..#.......#.##.##..###"
    , "#.......##.....#.......#.#...##"
    , "#.....#.#.#....#.#......#.#.#.."
    , "..##.....#..###......##........"
    , ".....#...#..##....#......#....."
    , "#..#..#....#.#...#..###.......#"
    , ".....#.....#....#..#...#.#..##."
    , "#####........#...#..#..##..#.#."
    , ".#..#...#.##....#.#..#......###"
    , "#.###.#..#.....##..##....#...#."
    , ".#...#.#####....##..........##."
    ]


type alias Hill =
    { map : List (List Ground)
    , width : Int
    , height : Int
    }


type Ground
    = Snow
    | Tree


getGround : Hill -> Int -> Int -> Ground
getGround hill x y =
    let
        xr =
            modBy hill.width x

        yr =
            modBy hill.height y
    in
    List.Extra.getAt yr hill.map
        |> Maybe.andThen (\row -> List.Extra.getAt xr row)
        |> Maybe.withDefault Tree
